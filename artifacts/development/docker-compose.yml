version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - api-gateway

  # API Gateway
  api-gateway:
    image: kong:3.4-alpine
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    volumes:
      - ./kong:/kong/declarative

  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:
      - ./backend/user-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=flowerdb
      - DB_USER=flower_user
      - DB_PASSWORD=dev_password
      - JWT_SECRET=dev_jwt_secret_key
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile.dev
    ports:
      - "3002:3002"
    volumes:
      - ./backend/product-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=flowerdb
      - DB_USER=flower_user
      - DB_PASSWORD=dev_password
      - REDIS_HOST=redis
      - S3_BUCKET=flower-shop-images
    depends_on:
      - postgres
      - redis

  # Cart Service
  cart-service:
    build:
      context: ./backend/cart-service
      dockerfile: Dockerfile.dev
    ports:
      - "3003:3003"
    volumes:
      - ./backend/cart-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis

  # Order Service
  order-service:
    build:
      context: ./backend/order-service
      dockerfile: Dockerfile.dev
    ports:
      - "3004:3004"
    volumes:
      - ./backend/order-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=flowerdb
      - DB_USER=flower_user
      - DB_PASSWORD=dev_password
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - postgres
      - rabbitmq

  # Notification Service
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile.dev
    ports:
      - "3005:3005"
    volumes:
      - ./backend/notification-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - SENDGRID_API_KEY=your_sendgrid_key
      - TWILIO_ACCOUNT_SID=your_twilio_sid
      - TWILIO_AUTH_TOKEN=your_twilio_token
    depends_on:
      - rabbitmq

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=flowerdb
      - POSTGRES_USER=flower_user
      - POSTGRES_PASSWORD=dev_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flower_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # MinIO (S3 Compatible Storage for Development)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:

networks:
  default:
    name: flower-shop-network
    driver: bridge